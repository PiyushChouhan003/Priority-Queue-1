Question --> https://www.interviewbit.com/problems/magician-and-chocolates/

public class Solution {
    public int nchoc(int A, int[] B) {
        int n = B.length, p = 1_000_000_007;
        if (A == 0 || n == 0)
            return 0;

        buildMaxHeap(B);

        long res = 0;
        for (int i = 0; i < A && B[0] > 0; i++) {
            res = (res + B[0]) % p;
            B[0] /= 2;
            maxHeapify(B, n, 0);
        }

        return (int) res;
    }

    private void buildMaxHeap(int[] A) {
        int n = A.length;
        for (int i = n / 2 - 1; i >= 0; i--)
            maxHeapify(A, n, i);
    }

    private void maxHeapify(int[] A, int n, int i) {
        int largest = i, left = 2 * i + 1, right = 2 * i + 2;

        if (left < n && A[left] > A[largest])
            largest = left;
        if (right < n && A[right] > A[largest])
            largest = right;

        if (largest != i) {
            swap(A, i, largest);
            maxHeapify(A, n, largest);
        }
    }

    private void swap(int[] A, int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}
